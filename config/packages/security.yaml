security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
#        App\Entity\User\User: 'auto'
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-providerz
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|styles|images|js)/
            security: false
        main:
            lazy: true
#            provider: users_in_memory
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout

#            remember_me:
#                secret: '%kernel.secret%'
#                lifetime: 604800 # 1 week in seconds
#                path: /
                # by default, the feature is enabled by checking a
                # checkbox in the login form (see below), uncomment the
                # following line to always enable it.
                #always_remember_me: true
#            form_login:
#                login_path: app_login
#                check_path: app_login
#                enable_csrf: true


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # il faudra avoir le role admin pour acc√©der aux url qui commencent par /admin
        - { path: ^/login, role: PUBLIC_ACCESS }
        - { path: ^/, roles: ROLE_GUEST }
        - { path: ^/staff, roles: ROLE_SUPER_ADMIN}
        - { path: ^/a/admin/, roles: ROLE_ADMIN }
        - { path: ^/a/member/, roles: ROLE_MEMBER }

#
    role_hierarchy:
        ROLE_SUPER_ADMIN: ROLE_ADMIN
        ROLE_ADMIN: ROLE_MEMBER
        ROLE_MEMBER: ROLE_GUEST
#        # ROLE_USER: IS_AUTHENTICATED_ANONYMOUSLY

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
